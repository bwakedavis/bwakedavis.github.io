---
title: learn Rust lang
date: "2020-05-12T22:12:03.284Z"
description: "Rust programming language is a low level language developed at Mozilla."
---


Rust is a system programming language.
Used in building web browsers, web servers, databases, firmware, tools and utilities, gaming and operating systems.
No garbage collection.
Memory safety. Use after free, Dangling pointers, Null pointer exceptions, Iterator invalidation, data races. 
Zero cost Abstractions.
Integrated build tooling
Package Manager
Open-source package repository
Default testing framework
Autogenerated documentation.
Community- Rust users forum, Internals forum, discord, RustConf, This week in Rust newsletter, rust-lang on twitter and reddit.

update - ```rustup update```

Hello, world
main.rs
```rust
fn main() {
    println!("Hello, world!");
}
```
Compile ```rustc main.rs```

Run ```./main```.

cargo hello world
```cargo new hello-world```
```cargo build```
```cargo run```



## Variables

Variables are bound to values using the keyword argument  ```let```.
Immutable by default.This creates predictability in our code.
Can be mutable by adding ```mut``` keyword.

Constants are declared with ```const``` keyword. Names of these constants are capitalized with underscore. can only be set to expressions.

Shadow a variable. Declare a new variable with the same name as the previous, creating a new binding.The new variable will shadow the old variable.

```rust
fn main() {
    let mut x = 1;
    x = 3;
    println!("The value of x is : {}", x);
    let y = true;
    let y = false;
    println!("The value of y is : {}", y);

    const STRING: &str = "hello";
    println!("The value of constant string is : {}", STRING);
}
```


## Data Types

### Scaler types
1. Integers
    + Integers are whole numbers.
    + They're either signed or unsigned(+ve or -ve).
    + compiler must know the data types for each variable in your code.
    + The data type can be inferred by the compiler.It defaults to i32.
    + isize, usize(8 bit, i8, u8)

2. Floating point
    + Numbers with decimal points.
    + types: f32, f64
    + default: f64.

3. Booleans
    + have a value of either 'true' or 'false'.
    + specified using keyword ```bool```.
    + 1 byte in size.
    + Used most in conditional and control flow statements.

4. Characters
    + Represents letters.
    + specified using keyword ```char```.
    + Use single quotes.

```rust
fn main() {
    let a = 5; //i32
    let b: u8 = 1;// u8

    let x = 2.0; //f64
    let y: f32 = 3.0; //f32

    let sum = a + b;
    
    let difference = x - 1.0;

    let product = 4 * a;

    let quotient = 9.0 / y;
    let remainder = a % b;

    let t = true;
    let f = false;

    let d = 'D';
}
```

### Compound types

1. Arrays
    + Continuous group of items.
    + Fixed length.
    + Length known at compile time.
    + heterogeneous(contain items of the same data type)
    + Access items by index.
    + compiler warns when index is known to be out of bounds.
    + Panics at runtime when index is out of bounds.

2. Tuples 
    + Continuous group of items.
    + fixed length.
    + Length known at compile time.
    + Homogeneous(contain items of the different data types)
    + Empty tuple are called ```unit```.
    + Access items by index using dot notation.
    + Impossible to access items out of bounds.

```rust
fn main() {
    let array = [1u32, 3, 4];
    let first_element = array[0];
    let len = "some text".len();

    let tuple = (1u32, 2,"do",  true);
    let first_element = tuple.0;
}
```

3. Functions
    + Start with ```fn```.
    + The function name.
    + An optional list of arguments. Stating arguments type is required.
    + An optional return type. A return type is required if a value is returned. If not return type is unit.
    + The function body.

```rust
fn main() {
    println!("Hello, world!");
    last_char(String::from("Hello"));
}

fn last_char(string: String) -> char {
    if string.is_empty() {
        return 'O';
    }
    string.chars().next_back().unwrap()
}
```

4. Structs
    + A type composed of other types
    + Can contain different types.
    + Three flavours of structs
        + Classic - Most commonly used, each field has a name and a type.
        + Tuple - Similar to classic structs, have no names.
        + Unit - have no fields, similar to () unit type.
    + Use keyword ```struct``` followed by the name of the struct.
    + Name describe the object appropriately.
    + Create an instance of the struct by supplying ```key: value``` pairs.
    + More instances can be created.
    + access properties with the dot notation.

```rust
struct Person {
    name: String,
    age: u8,
    likes_oranges: bool
}

struct Point2D(u32, u32);
fn main() {
   let person = Person{
       name: String::from("Davis"),
       likes_oranges: false,
       age: 20,
   };

   println!("Person name is: {}", person.name);

   let origin = Point2D(100, 200);
   println!(" Point contains {:?} and {:?}", origin.0, origin.1);

   //destructuring
   let Point2D(x, y) = origin;
   println!(" Point contains {:?} and {:?}", x, y)
}
```

5. Enums
    + List all variations of some data.
    + Common across programming languages.
    + Referred to as algebraic data types.
    + use the keyword ```enum``` followed by the name.
    + List all variations.
    + The enum is now a custom data type that can be used in code.
    + Can include any kind of data.
    + can have a variety of types.
    + Similar to structs but with more flexibility and advantages.
        + Describe what kind of data will be stored.
        + Each variant can have a different type.
        + All variants stored under the custom enum type.

```rust
enum WebEvent {
    PageLoad,
    PageUnload,
    KeyPress(char),
    Paste(String),
    Click{x:i64, y:i64},
}

enum Option <T> {
    Some(T),
    None,
}

fn main() {
    let quit = WebEvent::KeyPress('q');

    let something = Some(1);
}
```

## Control flow

### if ... else, else if expressions
Provide a condition , and then execute a block of code if the condition evaluates to true.
An else expression can be added optionally.
If no else is provided, the program will skip the if block if the condition evaluates to false.
If you have more than two conditions to check, if and else can be combined in an else if expression.

In the case all if and else if conditions evaluates to false, then the else block is executed.

### match

Similar to switch in other programming languages.
A scrutiny expression is provided to compare to the patterns.
Arms are evaluated and compared with the scrutiny expression.

The scrutiny expression is x.
Each arm has a pattern and some code. The "=>" operator separates the pattern and the code to run.
The first arm with the matching pattern is executed.

```rust
fn main() {
    if 1 == 2 {
        println!("match is broken");
    } else {
        println!("Everything is fine");
    }

    let formal = true;
    let greeting = if formal {
        println!("Good evening");
    } else {
        println!("Hey, friend!");
    };


    let number = 6;

    if number % 4 == 0 {
        println!("Number is divisible by 4");
    } else if number % 3 == 0 {
        println!("Number is divisible by 3")
    } else {
        println!("Number is not divisible by 3 or 4");
    }

    let boolean = true;

    let binary = match boolean {
        false => 0,
        true => 1,
    };

}
```

### Loop

Used to execute over a block of code forever. Or until it is stopped, or the program quits.
Instead of having this code run infinitely, the ```break``` keyword can be used.


### while loop

Conditional loops
Run until condition is met or become false.

### for loop

Iterate through elements in a collection.
Each pass of the loop extracts a values.

```rust
fn main() {
    let mut i = 1;
    let something = loop {
        i *= 2;
        if i > 100 {
            break i;
        }
    };
    assert_eq!(something, 128);

    let mut counter = 0;

    while counter < 10 {
        println!("Hello");
        counter += 1; 
    }

    for item in 0..5{
        println!("{}", item*2);
    }
}
```
