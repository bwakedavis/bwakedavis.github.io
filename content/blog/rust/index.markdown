---
title: learn Rust lang
date: "2020-05-12T22:12:03.284Z"
description: "Rust programming language is a low level language developed at Mozilla."
---


Rust is a system programming language.
Used in building web browsers, web servers, databases, firmware, tools and utilities, gaming and operating systems.
No garbage collection.
Memory safety. Use after free, Dangling pointers, Null pointer exceptions, Iterator invalidation, data races. 
Zero cost Abstractions.
Integrated build tooling
Package Manager
Open-source package repository
Default testing framework
Autogenerated documentation.
Community- Rust users forum, Internals forum, discord, RustConf, This week in Rust newsletter, rust-lang on twitter and reddit.

update - ```rustup update```

Hello, world
main.rs
```rust
fn main() {
    println!("Hello, world!");
}
```
Compile ```rustc main.rs```

Run ```./main```.

cargo hello world
```cargo new hello-world```
```cargo build```
```cargo run```



## Variables

Variables are bound to values using the keyword argument  ```let```.
Immutable by default.This creates predictability in our code.
Can be mutable by adding ```mut``` keyword.

Constants are declared with ```const``` keyword. Names of these constants are capitalized with underscore. can only be set to expressions.

Shadow a variable. Declare a new variable with the same name as the previous, creating a new binding.The new variable will shadow the old variable.

```rust
fn main() {
    let mut x = 1;
    x = 3;
    println!("The value of x is : {}", x);
    let y = true;
    let y = false;
    println!("The value of y is : {}", y);

    const STRING: &str = "hello";
    println!("The value of constant string is : {}", STRING);
}
```


## Data Types

### Scaler types
1. Integers
    + Integers are whole numbers.
    + They're either signed or unsigned(+ve or -ve).
    + compiler must know the data types for each variable in your code.
    + The data type can be inferred by the compiler.It defaults to i32.
    + isize, usize(8 bit, i8, u8)

2. Floating point
    + Numbers with decimal points.
    + types: f32, f64
    + default: f64.

3. Booleans
    + have a value of either 'true' or 'false'.
    + specified using keyword ```bool```.
    + 1 byte in size.
    + Used most in conditional and control flow statements.

4. Characters
    + Represents letters.
    + specified using keyword ```char```.
    + Use single quotes.

```rust
fn main() {
    let a = 5; //i32
    let b: u8 = 1;// u8

    let x = 2.0; //f64
    let y: f32 = 3.0; //f32

    let sum = a + b;
    
    let difference = x - 1.0;

    let product = 4 * a;

    let quotient = 9.0 / y;
    let remainder = a % b;

    let t = true;
    let f = false;

    let d = 'D';
}
```

### Compound types

1. Arrays
    + Continuous group of items.
    + Fixed length.
    + Length known at compile time.
    + heterogeneous(contain items of the same data type)
    + Access items by index.
    + compiler warns when index is known to be out of bounds.
    + Panics at runtime when index is out of bounds.

2. Tuples 
    + Continuous group of items.
    + fixed length.
    + Length known at compile time.
    + Homogeneous(contain items of the different data types)
    + Empty tuple are called ```unit```.
    + Access items by index using dot notation.
    + Impossible to access items out of bounds.

```rust
fn main() {
    let array = [1u32, 3, 4];
    let first_element = array[0];
    let len = "some text".len();

    let tuple = (1u32, 2,"do",  true);
    let first_element = tuple.0;
}
```

