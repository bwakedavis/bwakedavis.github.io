{"componentChunkName":"component---src-templates-blog-post-js","path":"/rust/","result":{"data":{"site":{"siteMetadata":{"title":"bwake blog"}},"markdownRemark":{"id":"a89d5239-b524-514c-9c86-18a39f786879","excerpt":"Rust is a system programming language.\nUsed in building web browsers, web servers, databases, firmware, tools and utilities, gaming and operating systems.\nNo…","html":"<p>Rust is a system programming language.\nUsed in building web browsers, web servers, databases, firmware, tools and utilities, gaming and operating systems.\nNo garbage collection.\nMemory safety. Use after free, Dangling pointers, Null pointer exceptions, Iterator invalidation, data races.\nZero cost Abstractions.\nIntegrated build tooling\nPackage Manager\nOpen-source package repository\nDefault testing framework\nAutogenerated documentation.\nCommunity- Rust users forum, Internals forum, discord, RustConf, This week in Rust newsletter, rust-lang on twitter and reddit.</p>\n<p>update - <code class=\"language-text\">rustup update</code></p>\n<p>Hello, world\nmain.rs</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compile <code class=\"language-text\">rustc main.rs</code></p>\n<p>Run <code class=\"language-text\">./main</code>.</p>\n<p>cargo hello world\n<code class=\"language-text\">cargo new hello-world</code>\n<code class=\"language-text\">cargo build</code>\n<code class=\"language-text\">cargo run</code></p>\n<h2>Variables</h2>\n<p>Variables are bound to values using the keyword argument  <code class=\"language-text\">let</code>.\nImmutable by default.This creates predictability in our code.\nCan be mutable by adding <code class=\"language-text\">mut</code> keyword.</p>\n<p>Constants are declared with <code class=\"language-text\">const</code> keyword. Names of these constants are capitalized with underscore. can only be set to expressions.</p>\n<p>Shadow a variable. Declare a new variable with the same name as the previous, creating a new binding.The new variable will shadow the old variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x is : {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of y is : {}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">STRING</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of constant string is : {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Data Types</h2>\n<h3>Scaler types</h3>\n<ol>\n<li>\n<p>Integers</p>\n<ul>\n<li>Integers are whole numbers.</li>\n<li>They’re either signed or unsigned(+ve or -ve).</li>\n<li>compiler must know the data types for each variable in your code.</li>\n<li>The data type can be inferred by the compiler.It defaults to i32.</li>\n<li>isize, usize(8 bit, i8, u8)</li>\n</ul>\n</li>\n<li>\n<p>Floating point</p>\n<ul>\n<li>Numbers with decimal points.</li>\n<li>types: f32, f64</li>\n<li>default: f64.</li>\n</ul>\n</li>\n<li>\n<p>Booleans</p>\n<ul>\n<li>have a value of either ‘true’ or ‘false’.</li>\n<li>specified using keyword <code class=\"language-text\">bool</code>.</li>\n<li>1 byte in size.</li>\n<li>Used most in conditional and control flow statements.</li>\n</ul>\n</li>\n<li>\n<p>Characters</p>\n<ul>\n<li>Represents letters.</li>\n<li>specified using keyword <code class=\"language-text\">char</code>.</li>\n<li>Use single quotes.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i32</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// u8</span>\n\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f64</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f32</span>\n\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> difference <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> product <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> quotient <span class=\"token operator\">=</span> <span class=\"token number\">9.0</span> <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> remainder <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token char string\">'D'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Compound types</h3>\n<ol>\n<li>\n<p>Arrays</p>\n<ul>\n<li>Continuous group of items.</li>\n<li>Fixed length.</li>\n<li>Length known at compile time.</li>\n<li>heterogeneous(contain items of the same data type)</li>\n<li>Access items by index.</li>\n<li>compiler warns when index is known to be out of bounds.</li>\n<li>Panics at runtime when index is out of bounds.</li>\n</ul>\n</li>\n<li>\n<p>Tuples </p>\n<ul>\n<li>Continuous group of items.</li>\n<li>fixed length.</li>\n<li>Length known at compile time.</li>\n<li>Homogeneous(contain items of the different data types)</li>\n<li>Empty tuple are called <code class=\"language-text\">unit</code>.</li>\n<li>Access items by index using dot notation.</li>\n<li>Impossible to access items out of bounds.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1u32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_element <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1u32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"do\"</span><span class=\"token punctuation\">,</span>  <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_element <span class=\"token operator\">=</span> tuple<span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>\n<p>Functions</p>\n<ul>\n<li>Start with <code class=\"language-text\">fn</code>.</li>\n<li>The function name.</li>\n<li>An optional list of arguments. Stating arguments type is required.</li>\n<li>An optional return type. A return type is required if a value is returned. If not return type is unit.</li>\n<li>The function body.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">last_char</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">last_char</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token char string\">'O'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    string<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>\n<p>Structs</p>\n<ul>\n<li>A type composed of other types</li>\n<li>Can contain different types.</li>\n<li>\n<p>Three flavours of structs</p>\n<ul>\n<li>Classic - Most commonly used, each field has a name and a type.</li>\n<li>Tuple - Similar to classic structs, have no names.</li>\n<li>Unit - have no fields, similar to () unit type.</li>\n</ul>\n</li>\n<li>Use keyword <code class=\"language-text\">struct</code> followed by the name of the struct.</li>\n<li>Name describe the object appropriately.</li>\n<li>Create an instance of the struct by supplying <code class=\"language-text\">key: value</code> pairs.</li>\n<li>More instances can be created.</li>\n<li>access properties with the dot notation.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">,</span>\n    likes_oranges<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Point2D</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n       name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Davis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n       likes_oranges<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person name is: {}\"</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">let</span> origin <span class=\"token operator\">=</span> <span class=\"token class-name\">Point2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Point contains {:?} and {:?}\"</span><span class=\"token punctuation\">,</span> origin<span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> origin<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">//destructuring</span>\n   <span class=\"token keyword\">let</span> <span class=\"token class-name\">Point2D</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">;</span>\n   <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Point contains {:?} and {:?}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>\n<p>Enums</p>\n<ul>\n<li>List all variations of some data.</li>\n<li>Common across programming languages.</li>\n<li>Referred to as algebraic data types.</li>\n<li>use the keyword <code class=\"language-text\">enum</code> followed by the name.</li>\n<li>List all variations.</li>\n<li>The enum is now a custom data type that can be used in code.</li>\n<li>Can include any kind of data.</li>\n<li>can have a variety of types.</li>\n<li>\n<p>Similar to structs but with more flexibility and advantages.</p>\n<ul>\n<li>Describe what kind of data will be stored.</li>\n<li>Each variant can have a different type.</li>\n<li>All variants stored under the custom enum type.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">WebEvent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PageLoad</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">PageUnload</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">KeyPress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Paste</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Click</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span><span class=\"token keyword\">i64</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">i64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Option</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> quit <span class=\"token operator\">=</span> <span class=\"token class-name\">WebEvent</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">KeyPress</span><span class=\"token punctuation\">(</span><span class=\"token char string\">'q'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> something <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"learn Rust lang","date":"May 12, 2020","description":"Rust programming language is a low level language developed at Mozilla."}},"previous":{"fields":{"slug":"/ui-ux/"},"frontmatter":{"title":"user experience(UX) and user interface design(UI)"}},"next":{"fields":{"slug":"/devops/"},"frontmatter":{"title":"learn devops"}}},"pageContext":{"id":"a89d5239-b524-514c-9c86-18a39f786879","previousPostId":"dc311c73-7d24-52c3-bc41-18af3caaffa8","nextPostId":"bf4a38fa-1f69-5f61-ba7e-1179bccb67a9"}},"staticQueryHashes":["2841359383","3257411868"]}