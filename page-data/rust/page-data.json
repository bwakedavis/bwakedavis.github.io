{"componentChunkName":"component---src-templates-blog-post-js","path":"/rust/","result":{"data":{"site":{"siteMetadata":{"title":"bwake blog"}},"markdownRemark":{"id":"a89d5239-b524-514c-9c86-18a39f786879","excerpt":"Rust is a system programming language.\nUsed in building web browsers, web servers, databases, firmware, tools and utilities, gaming and operating systems.\nNo…","html":"<p>Rust is a system programming language.\nUsed in building web browsers, web servers, databases, firmware, tools and utilities, gaming and operating systems.\nNo garbage collection.\nMemory safety. Use after free, Dangling pointers, Null pointer exceptions, Iterator invalidation, data races.\nZero cost Abstractions.\nIntegrated build tooling\nPackage Manager\nOpen-source package repository\nDefault testing framework\nAutogenerated documentation.\nCommunity- Rust users forum, Internals forum, discord, RustConf, This week in Rust newsletter, rust-lang on twitter and reddit.</p>\n<p>update - <code class=\"language-text\">rustup update</code></p>\n<p>Hello, world\nmain.rs</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Compile <code class=\"language-text\">rustc main.rs</code></p>\n<p>Run <code class=\"language-text\">./main</code>.</p>\n<p>cargo hello world\n<code class=\"language-text\">cargo new hello-world</code>\n<code class=\"language-text\">cargo build</code>\n<code class=\"language-text\">cargo run</code></p>\n<h2>Variables</h2>\n<p>Variables are bound to values using the keyword argument  <code class=\"language-text\">let</code>.\nImmutable by default.This creates predictability in our code.\nCan be mutable by adding <code class=\"language-text\">mut</code> keyword.</p>\n<p>Constants are declared with <code class=\"language-text\">const</code> keyword. Names of these constants are capitalized with underscore. can only be set to expressions.</p>\n<p>Shadow a variable. Declare a new variable with the same name as the previous, creating a new binding.The new variable will shadow the old variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of x is : {}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of y is : {}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">STRING</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of constant string is : {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Data Types</h2>\n<h3>Scaler types</h3>\n<ol>\n<li>\n<p>Integers</p>\n<ul>\n<li>Integers are whole numbers.</li>\n<li>They’re either signed or unsigned(+ve or -ve).</li>\n<li>compiler must know the data types for each variable in your code.</li>\n<li>The data type can be inferred by the compiler.It defaults to i32.</li>\n<li>isize, usize(8 bit, i8, u8)</li>\n</ul>\n</li>\n<li>\n<p>Floating point</p>\n<ul>\n<li>Numbers with decimal points.</li>\n<li>types: f32, f64</li>\n<li>default: f64.</li>\n</ul>\n</li>\n<li>\n<p>Booleans</p>\n<ul>\n<li>have a value of either ‘true’ or ‘false’.</li>\n<li>specified using keyword <code class=\"language-text\">bool</code>.</li>\n<li>1 byte in size.</li>\n<li>Used most in conditional and control flow statements.</li>\n</ul>\n</li>\n<li>\n<p>Characters</p>\n<ul>\n<li>Represents letters.</li>\n<li>specified using keyword <code class=\"language-text\">char</code>.</li>\n<li>Use single quotes.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i32</span>\n    <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// u8</span>\n\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f64</span>\n    <span class=\"token keyword\">let</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f32</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f32</span>\n\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> difference <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> product <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> quotient <span class=\"token operator\">=</span> <span class=\"token number\">9.0</span> <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> remainder <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token char string\">'D'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Compound types</h3>\n<ol>\n<li>\n<p>Arrays</p>\n<ul>\n<li>Continuous group of items.</li>\n<li>Fixed length.</li>\n<li>Length known at compile time.</li>\n<li>heterogeneous(contain items of the same data type)</li>\n<li>Access items by index.</li>\n<li>compiler warns when index is known to be out of bounds.</li>\n<li>Panics at runtime when index is out of bounds.</li>\n</ul>\n</li>\n<li>\n<p>Tuples </p>\n<ul>\n<li>Continuous group of items.</li>\n<li>fixed length.</li>\n<li>Length known at compile time.</li>\n<li>Homogeneous(contain items of the different data types)</li>\n<li>Empty tuple are called <code class=\"language-text\">unit</code>.</li>\n<li>Access items by index using dot notation.</li>\n<li>Impossible to access items out of bounds.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1u32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_element <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> <span class=\"token string\">\"some text\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1u32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"do\"</span><span class=\"token punctuation\">,</span>  <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> first_element <span class=\"token operator\">=</span> tuple<span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"learn Rust lang","date":"May 12, 2020","description":"Rust programming language is a low level language developed at Mozilla."}},"previous":{"fields":{"slug":"/regex/"},"frontmatter":{"title":"Regex"}},"next":{"fields":{"slug":"/mariadb/"},"frontmatter":{"title":"how to install mariadb on linux debian"}}},"pageContext":{"id":"a89d5239-b524-514c-9c86-18a39f786879","previousPostId":"e7de4ca6-4142-51f4-8d0a-b45743f9d677","nextPostId":"12060996-1fce-5926-81f8-ee2092051ee8"}},"staticQueryHashes":["2841359383","3257411868"]}